{"index.js":"function sumPrimes(num) {\n  // solution using Sieve of Eratosthenes\n  /*const eratosthenes = function(n) {\n    // Eratosthenes algorithm to find all primes under n\n    let array = [], upperLimit = Math.sqrt(n), output = []\n\n    // Make an array from 2 to (n - 1)\n    for (let i = 0; i < n; i++) {\n      array.push(true)\n    }\n\n    // Remove multiples of primes starting from 2, 3, 5,...\n    for (let i = 2; i <= upperLimit; i++) {\n      if (array[i]) {\n        for (let j = i * i; j < n; j += i) {\n          array[j] = false\n        }\n      }\n    }\n\n    // All array[i] set to true are primes\n    for (let i = 2; i < n; i++) {\n      if(array[i]) {\n        output.push(i)\n      }\n    }\n\n    return output\n  }\n  return eratosthenes(num).reduce(((acc, curr) => acc + curr), 0)*/\n\n  // Function to get the primes up to max in an array\n  const getPrimes = max => {\n    const sieve = []\n    let i\n    let j\n    let primes = []\n    for (i = 2; i <= max; ++i) {\n      if (!sieve[i]) {\n        // i has not been marked -- it is prime\n        primes.push(i)\n        for (j = i << 1; j <= max; j += i) {\n          sieve[j] = true\n        }\n      }\n    }\n\n    return primes;\n  }\n\n  // Add the primes\n  let primes = getPrimes(num)\n  let result = 0\n  for (let p = 0; p < primes.length; p++) {\n    result += primes[p]\n  }\n\n  return result\n}\n\nsumPrimes(10)\nsumPrimes(977)"}